
import React, { useState, useCallback, useRef, useEffect } from 'react';
import { INITIAL_STATS, INITIAL_PETITIONS, INITIAL_OFFICIALS, INITIAL_HAREM, INITIAL_MILITARY, INITIAL_PRINCES, INITIAL_DIPLOMACY, MONGOL_INVASIONS, INVASION_EVENTS, ACHIEVEMENTS, FlourishIcon, UsersIcon, HeartIcon, SparklesIcon, ShieldCheckIcon, UserGroupIcon, GlobeAltIcon, QuestionMarkCircleIcon, GiftIcon, SunIcon, MoonIcon, KeyIcon, TrophyIcon } from './constants';
import type { NationalStat, Stats, Petition, PetitionOption, Official, SaveState, GamePhase, BudgetAllocations, Consort, AidType, Military, Prince, Diplomacy, ActiveModal, NeighboringState as TNeighboringState, InvasionEventOption } from './types';
import { NationalStat as ENationalStat, Ministry, NeighboringState } from './types';
import Dashboard from './components/Dashboard';
import RelationshipsDashboard from './components/RelationshipsDashboard';
import HaremDashboard from './components/HaremDashboard';
import AidsPanel from './components/AidsPanel';
import Modal from './components/Modal';
import CourtSession from './components/CourtSession';
import BudgetAllocation from './components/BudgetAllocation';
import GameOver from './components/GameOver';
import MilitaryPanel from './components/MilitaryPanel';
import SuccessionPanel from './components/SuccessionPanel';
import DiplomacyPanel from './components/DiplomacyPanel';
import TutorialPanel from './components/TutorialPanel';
import DonationPanel from './components/DonationPanel';
import InvasionCountdown from './components/InvasionCountdown';
import MainMenu from './components/MainMenu';
import ApiKeySetupModal from './components/ApiKeySetupModal';
import { generateYearlySummary } from './services/geminiService';
import InvasionEvent from './components/InvasionEvent';
import AchievementsPanel from './components/AchievementsPanel';

const YearlyAnnals = ({ summary, onNewYear }: { summary: string; onNewYear: () => void; }) => (
    <div className="bg-amber-50 dark:bg-stone-800/70 border-2 border-red-800/50 dark:border-amber-400/20 rounded-lg p-6 lg:p-8 shadow-lg max-w-3xl mx-auto animate-fade-in">
        <h2 className="text-2xl font-serif-display font-bold text-red-900 dark:text-amber-200 mb-4">Bi√™n Ni√™n S·ª≠ Ho√†ng Tri·ªÅu (Royal Annals)</h2>
        <div className="prose prose-stone dark:prose-invert max-w-none text-stone-700 dark:text-stone-300 font-serif-display leading-relaxed whitespace-pre-wrap" dangerouslySetInnerHTML={{ __html: summary }} />
        <div className="text-center mt-8">
            <button
                onClick={onNewYear}
                className="bg-red-800 hover:bg-red-700 dark:bg-amber-600 dark:hover:bg-amber-500 text-yellow-50 dark:text-red-950 font-semibold py-2 px-6 rounded-lg shadow-md transition-all duration-300 transform hover:scale-105"
            >
                B·∫Øt ƒë·∫ßu nƒÉm m·ªõi (Begin New Year)
            </button>
        </div>
    </div>
);

const shuffleArray = <T,>(array: T[]): T[] => {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
};

const App: React.FC = () => {
    const [year, setYear] = useState(1225);
    const [stats, setStats] = useState<Stats>(INITIAL_STATS);
    const [officials, setOfficials] = useState<{ [key: string]: Official }>(INITIAL_OFFICIALS);
    const [harem, setHarem] = useState<Consort[]>(INITIAL_HAREM);
    const [military, setMilitary] = useState<Military>(INITIAL_MILITARY);
    const [princes, setPrinces] = useState<Prince[]>(INITIAL_PRINCES);
    const [diplomacy, setDiplomacy] = useState<Diplomacy>(INITIAL_DIPLOMACY);
    const [petitions, setPetitions] = useState<Petition[]>(() => shuffleArray(INITIAL_PETITIONS));
    const [completedPetitionIds, setCompletedPetitionIds] = useState<number[]>([]);
    const [currentPetitionIndex, setCurrentPetitionIndex] = useState(0);
    const [decisions, setDecisions] = useState<{ petitionTitle: string, decisionText: string }[]>([]);
    const [yearlySummary, setYearlySummary] = useState<string | null>(null);
    const [isEndingYear, setIsEndingYear] = useState(false);
    const [activeModal, setActiveModal] = useState<ActiveModal>(null);
    const [gamePhase, setGamePhase] = useState<GamePhase>('BUDGETING');
    const [gameOverMessage, setGameOverMessage] = useState<{title: string, text: string} | null>(null);
    const [budgetDecisionText, setBudgetDecisionText] = useState<string | null>(null);
    const [taxRevenueOfTheYear, setTaxRevenueOfTheYear] = useState(0);
    const [usedAids, setUsedAids] = useState<AidType[]>([]);
    const [nextMongolInvasionYear, setNextMongolInvasionYear] = useState<number | null>(MONGOL_INVASIONS[0]);
    const fileInputRef = useRef<HTMLInputElement>(null);
    const [isDarkMode, setIsDarkMode] = useState(() => {
        if (typeof window !== 'undefined' && window.localStorage) {
            const storedTheme = localStorage.getItem('theme');
            if (storedTheme) return storedTheme === 'dark';
            return window.matchMedia('(prefers-color-scheme: dark)').matches;
        }
        return false;
    });
    const [gameStarted, setGameStarted] = useState(false);
    const [apiKey, setApiKey] = useState<string | null>(() => {
        if (typeof window !== 'undefined') {
            return window.localStorage.getItem('gemini_api_key');
        }
        return null;
    });
    const [unlockedAchievements, setUnlockedAchievements] = useState<string[]>([]);

    // New states for yearly actions
    const [favorUsedThisYear, setFavorUsedThisYear] = useState(false);
    const [nurtureUsedThisYear, setNurtureUsedThisYear] = useState(false);
    const [favoredConsortId, setFavoredConsortId] = useState<string | null>(null);

    const unlockAchievement = useCallback((achievementId: string) => {
        setUnlockedAchievements(prev => {
            if (prev.includes(achievementId)) {
                return prev; // Already unlocked
            }
            const achievement = ACHIEVEMENTS.find(a => a.id === achievementId);
            if (achievement) {
                // Simple alert for now. Could be a more fancy toast notification later.
                alert(`üèÜ Th√†nh t·ª±u M·ªü kh√≥a: ${achievement.name}`);
            }
            return [...prev, achievementId];
        });
    }, []);

    useEffect(() => {
        if (isDarkMode) {
            document.documentElement.classList.add('dark');
            localStorage.setItem('theme', 'dark');
        } else {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('theme', 'light');
        }
    }, [isDarkMode]);

    const toggleDarkMode = () => setIsDarkMode(!isDarkMode);

    const handleApiKeyUpdate = (newKey: string | null) => {
        if (newKey) {
            localStorage.setItem('gemini_api_key', newKey);
        } else {
            localStorage.removeItem('gemini_api_key');
        }
        setApiKey(newKey);
    };

    const getAvailablePetitions = useCallback(() => {
        return shuffleArray(
            INITIAL_PETITIONS.filter(p => 
                !completedPetitionIds.includes(p.id) &&
                (!p.trigger || p.trigger(stats, diplomacy, princes, harem))
            )
        );
    }, [stats, diplomacy, princes, harem, completedPetitionIds]);
    
    useEffect(() => {
        setPetitions(getAvailablePetitions());
    }, [year, getAvailablePetitions]);


    const currentPetition = petitions[currentPetitionIndex] || null;

    useEffect(() => {
        if (gamePhase === 'GAME_OVER') return;

        if (year >= 1225 + 70) {
            setGamePhase('GAME_OVER');
            const hasCrownPrince = princes.some(p => p.isCrownPrince);
            if (hasCrownPrince) {
                 unlockAchievement('good_ending');
                 setGameOverMessage({
                    title: "Thi√™n Thu Th·ªãnh Th·∫ø (A Glorious Era)",
                    text: `B·ªá h·∫° ƒë√£ tr·ªã v√¨ trong 70 nƒÉm, ch·ªçn ƒë∆∞·ª£c ng∆∞·ªùi k·∫ø v·ªã anh minh, ƒë∆∞a ƒê·∫°i Vi·ªát ƒë·∫øn m·ªôt th·ªùi k·ª≥ ho√†ng kim. T√™n c·ªßa ng√†i s·∫Ω ƒë∆∞·ª£c ghi v√†o s·ª≠ s√°ch nh∆∞ m·ªôt trong nh·ªØng v·ªã vua vƒ© ƒë·∫°i nh·∫•t. (You have ruled for 70 glorious years, chosen a wise heir, and led ƒê·∫°i Vi·ªát into a golden age. Your name will be remembered as one of the greatest emperors.)`
                });
            } else {
                unlockAchievement('normal_ending');
                setGameOverMessage({
                    title: "Tri·ªÅu ƒê·∫°i An B√¨nh (A Peaceful Reign)",
                    text: `B·ªá h·∫° ƒë√£ tr·ªã v√¨ trong 70 nƒÉm, gi·ªØ cho x√£ t·∫Øc ƒë∆∞·ª£c th√°i b√¨nh. Tuy nhi√™n, do ch∆∞a ch·ªçn ƒë∆∞·ª£c ng∆∞·ªùi k·∫ø v·ªã x·ª©ng ƒë√°ng, t∆∞∆°ng lai c·ªßa ƒê·∫°i Vi·ªát v·∫´n c√≤n l√† m·ªôt d·∫•u h·ªèi. (You have ruled for 70 years and kept the kingdom at peace. However, without a worthy heir, the future of ƒê·∫°i Vi·ªát remains uncertain.)`
                });
            }
            return;
        }

        const rebelliousOfficialsCount = Object.values(officials).filter(o => o.relationship <= 20).length;
        const rebelliousConsortsCount = harem.filter(c => c.relationship === 0).length * 2; // Each 0-relationship consort counts as 2 rebels
        const totalRebelliousCount = rebelliousOfficialsCount + rebelliousConsortsCount;

        if (totalRebelliousCount >= 3) {
            setGamePhase('GAME_OVER');
            unlockAchievement('dynasty_falls');
            let reasonText = "L√≤ng d√¢n o√°n th√°n, c√°c ƒë·∫°i th·∫ßn m∆∞u ph·∫£n.";
            if (rebelliousConsortsCount > 0) {
                reasonText = "L√≤ng d√¢n o√°n th√°n, c√°c ƒë·∫°i th·∫ßn m∆∞u ph·∫£n v√† h·∫≠u cung b·∫•t ·ªïn.";
            }
            setGameOverMessage({
                title: "Tri·ªÅu ƒê·∫°i S·ª•p ƒê·ªï (Dynasty Falls)",
                text: `${reasonText} B·ªá h·∫° ƒë√£ b·ªã ph·∫ø tru·∫•t do kh√¥ng th·ªÉ ki·ªÉm so√°t ƒë∆∞·ª£c tri·ªÅu ƒë√¨nh. (The court is in turmoil, and the ministers have rebelelled. You have been deposed for failing to control your court.)`
            });
            return;
        }

        for (const [statKey, value] of Object.entries(stats)) {
            if (value <= 0) {
                let reason = "";
                switch(statKey as ENationalStat) {
                    case ENationalStat.Prosperity: reason = "Qu·ªëc gia ki·ªát qu·ªá, d√¢n ch√∫ng l·∫ßm than. C√°c cu·ªôc n·ªïi d·∫≠y n·ªï ra kh·∫Øp n∆°i. (The nation is bankrupt, the people suffer. Uprisings erupt everywhere.)"; break;
                    case ENationalStat.Livelihood: reason = "D√¢n ch√∫ng ch·∫øt ƒë√≥i, kh√¥ng c√≤n tin v√†o thi√™n t·ª≠. Tri·ªÅu ƒë·∫°i ƒë√£ m·∫•t ƒëi thi√™n m·ªánh. (The people are starving and have lost faith in the emperor. The dynasty has lost the Mandate of Heaven.)"; break;
                    case ENationalStat.Education: reason = "Ngu d·ªët lan tr√†n, nh√¢n t√†i kh√¥ng c√≥. ƒê·∫•t n∆∞·ªõc ch√¨m trong h·ªón lo·∫°n v√† l·∫°c h·∫≠u. (Ignorance prevails, and talent is scarce. The nation descends into chaos and stagnation.)"; break;
                    case ENationalStat.Security: reason = "Bi√™n c∆∞∆°ng kh√¥ng ƒë∆∞·ª£c b·∫£o v·ªá, gi·∫∑c ngo·∫°i x√¢m tr√†n v√†o. Kinh th√†nh th·∫•t th·ªß. (The borders are undefended, and foreign invaders have overrun the capital.)"; break;
                    case ENationalStat.Treasury: reason = "Ng√¢n kh·ªë tr·ªëng r·ªóng, kh√¥ng th·ªÉ tr·∫£ l∆∞∆°ng cho quan l·∫°i v√† qu√¢n ƒë·ªôi. Tri·ªÅu ƒë√¨nh tan r√£. (The treasury is empty, unable to pay officials and soldiers. The court dissolves.)"; break;
                    case ENationalStat.Prestige: reason = "Uy t√≠n c·ªßa thi√™n t·ª≠ kh√¥ng c√≤n, c√°c n∆∞·ªõc ch∆∞ h·∫ßu n·ªïi d·∫≠y, ngo·∫°i bang khinh th∆∞·ªùng. (The emperor's prestige is gone. Vassal states rebel, and foreign powers show contempt.)"; break;
                }
                setGamePhase('GAME_OVER');
                unlockAchievement('dynasty_falls');
                setGameOverMessage({
                    title: "Tri·ªÅu ƒê·∫°i S·ª•p ƒê·ªï (Dynasty Falls)",
                    text: reason
                });
                return;
            }
        }
    }, [stats, officials, year, gamePhase, princes, harem, unlockAchievement]);

    const resetGameState = useCallback(() => {
        setYear(1225);
        setStats(INITIAL_STATS);
        setOfficials(INITIAL_OFFICIALS);
        setHarem(INITIAL_HAREM);
        setMilitary(INITIAL_MILITARY);
        setPrinces(INITIAL_PRINCES);
        setDiplomacy(INITIAL_DIPLOMACY);
        setCompletedPetitionIds([]);
        setPetitions(shuffleArray(INITIAL_PETITIONS));
        setCurrentPetitionIndex(0);
        setDecisions([]);
        setYearlySummary(null);
        setIsEndingYear(false);
        setGamePhase('BUDGETING');
        setBudgetDecisionText(null);
        setTaxRevenueOfTheYear(0);
        setNextMongolInvasionYear(MONGOL_INVASIONS[0]);
        setGameOverMessage(null);
        setActiveModal(null);
        setUsedAids([]);
        setUnlockedAchievements([]);
        setFavorUsedThisYear(false);
        setNurtureUsedThisYear(false);
        setFavoredConsortId(null);
    }, []);

    const handleNewGame = useCallback(() => {
        resetGameState();
        setGameStarted(true);
    }, [resetGameState]);

    const handleRestart = useCallback(() => {
        resetGameState();
        setGameStarted(false);
    }, [resetGameState]);

    const handleDecision = useCallback((option: PetitionOption, petitionTitle: string) => {
        // Update national stats
        setStats(prevStats => {
            const newStats = { ...prevStats };
            for (const [statKey, change] of Object.entries(option.effects)) {
                const key = statKey as NationalStat;
                newStats[key] = Math.max(0, Math.min(100, newStats[key] + change));
            }
            return newStats;
        });

        // Update official relationships
        if (option.relationshipEffects) {
            setOfficials(prevOfficials => {
                const newOfficials = { ...prevOfficials };
                for (const [officialKey, change] of Object.entries(option.relationshipEffects)) {
                    if (newOfficials[officialKey]) {
                        newOfficials[officialKey] = {
                            ...newOfficials[officialKey],
                            relationship: Math.max(0, Math.min(100, newOfficials[officialKey].relationship + change))
                        };
                    }
                }
                return newOfficials;
            });
        }
        
        // Update military stats
        if (option.militaryEffects) {
            setMilitary(prev => {
                const newMilitary = { ...prev };
                if (option.militaryEffects?.strength) newMilitary.strength = Math.max(0, Math.min(100, newMilitary.strength + option.militaryEffects.strength));
                if (option.militaryEffects?.morale) newMilitary.morale = Math.max(0, Math.min(100, newMilitary.morale + option.militaryEffects.morale));
                return newMilitary;
            });
        }

        // Update diplomacy stats
        if (option.diplomacyEffects) {
            setDiplomacy(prev => {
                const newDiplomacy = { ...prev };
                for (const [key, change] of Object.entries(option.diplomacyEffects)) {
                     const stateKey = key as TNeighboringState;
                     newDiplomacy[stateKey] = { ...newDiplomacy[stateKey], relationship: Math.max(0, Math.min(100, newDiplomacy[stateKey].relationship + change)) };
                }
                return newDiplomacy;
            });
        }

        // Add new consort
        if (option.addConsort) {
            const newConsort: Consort = { ...option.addConsort, id: `consort_${Date.now()}` };
            setHarem(prevHarem => [...prevHarem, newConsort]);
        }
        
        // Add new prince
        if (option.addPrince) {
            const motherConsort = harem.length > 0 ? harem[Math.floor(Math.random() * harem.length)] : { name: "M·ªôt cung n·ªØ v√¥ danh" };
            setPrinces(prev => {
                const newPrince: Prince = { 
                    ...option.addPrince!, 
                    mother: motherConsort.name,
                    id: `prince_${Date.now()}`, 
                    age: 0,
                    successionPoints: 0,
                    isCrownPrince: false,
                };
                const newPrinces = [...prev, newPrince];
                if (newPrinces.length >= 5) {
                    unlockAchievement('many_children');
                }
                return newPrinces;
            });
        }
        
        // Recruit new official - BUG FIX: Use static key directly.
        if (option.recruitOfficial) {
            setOfficials(prev => ({...prev, [option.recruitOfficial!.key]: option.recruitOfficial!.official}));
        }

        if (currentPetition?.unique) {
            setCompletedPetitionIds(prev => [...prev, currentPetition.id]);
        }
        
        setDecisions(prev => [...prev, { petitionTitle, decisionText: option.text }]);
        setCurrentPetitionIndex(prev => prev + 1);

    }, [currentPetition, harem, unlockAchievement]);
    
    const handleUseAid = useCallback((aid: AidType, statToBuff: NationalStat) => {
        if(usedAids.includes(aid)) return;
        setStats(prev => ({ ...prev, [statToBuff]: Math.min(100, prev[statToBuff] + 10) }));
        setUsedAids(prev => [...prev, aid]);
    }, [usedAids]);

    const getRelationshipText = (value: number) => {
        if (value > 85) return "C·ª±c k·ª≥ trung th√†nh (Extremely Loyal)";
        if (value > 65) return "Trung th√†nh (Loyal)";
        if (value > 40) return "Trung l·∫≠p (Neutral)";
        if (value > 20) return "B·∫•t m√£n (Displeased)";
        return "C√≥ √Ω ph·∫£n ngh·ªãch (Rebellious)";
    };

    const handleConfirmBudget = useCallback((allocations: BudgetAllocations) => {
        const totalAllocated = Object.values(allocations).reduce((sum, val) => sum + val, 0);
        if (totalAllocated > stats[ENationalStat.Treasury]) return;

        setStats(prev => {
            const newStats = { ...prev };
            newStats[ENationalStat.Treasury] = Math.max(0, prev[ENationalStat.Treasury] - totalAllocated);
            newStats[ENationalStat.Security] += Math.floor(allocations[Ministry.Binh] * 0.8 + allocations[Ministry.Hinh] * 0.3);
            newStats[ENationalStat.Prosperity] += Math.floor(allocations[Ministry.Ho] * 0.6);
            newStats[ENationalStat.Livelihood] += Math.floor(allocations[Ministry.Ho] * 0.4 + allocations[Ministry.Hinh] * 0.5);
            newStats[ENationalStat.Education] += Math.floor(allocations[Ministry.Le] * 0.7);
            newStats[ENationalStat.Prestige] += Math.floor(allocations[Ministry.Le] * 0.5);
            for (const key in newStats) {
                newStats[key as NationalStat] = Math.max(0, Math.min(100, newStats[key as NationalStat]));
            }
            return newStats;
        });
        const decisionSummary = `Ho√†ng ƒë·∫ø ƒë√£ ph√™ duy·ªát ng√¢n s√°ch cho c√°c b·ªô: ${Ministry.Binh} (${allocations[Ministry.Binh]} v·∫°n), ${Ministry.Ho} (${allocations[Ministry.Ho]} v·∫°n), ${Ministry.Le} (${allocations[Ministry.Le]} v·∫°n), ${Ministry.Hinh} (${allocations[Ministry.Hinh]} v·∫°n).`;
        setBudgetDecisionText(decisionSummary);
        setGamePhase('COURT_SESSION');
    }, [stats]);

     const handleBribeOfficial = useCallback((key: string) => {
        if (stats[ENationalStat.Treasury] < 5) {
            alert("Ng√¢n kh·ªë kh√¥ng ƒë·ªß ƒë·ªÉ mua chu·ªôc!");
            return;
        }
        if (officials[key] && officials[key].relationship < 100) {
            setStats(prev => ({...prev, [ENationalStat.Treasury]: prev[ENationalStat.Treasury] - 5}));
            setOfficials(prev => {
                const newOfficials = {...prev};
                newOfficials[key] = {
                    ...newOfficials[key],
                    relationship: Math.min(100, newOfficials[key].relationship + 10)
                };
                return newOfficials;
            });
        }
    }, [stats, officials]);

    const handleFavorConsort = useCallback((consortId: string) => {
        if (favorUsedThisYear) return;
        setFavorUsedThisYear(true);
        setFavoredConsortId(consortId);
        setHarem(prevHarem => 
            prevHarem.map(c => 
                c.id === consortId 
                    ? { ...c, relationship: Math.min(100, c.relationship + 15) }
                    : c
            )
        );
    }, [favorUsedThisYear]);

    const handleNurturePrince = useCallback((princeId: string) => {
        if (nurtureUsedThisYear) return;
        setNurtureUsedThisYear(true);
        setPrinces(prevPrinces => {
            let isCrowning = false;
            let crownedPrinceId: string | null = null;
    
            const updatedPrinces = prevPrinces.map(p => {
                if (p.id === princeId && !p.isCrownPrince) {
                    const newPoints = p.successionPoints + 1;
                    if (newPoints >= 20) {
                        isCrowning = true;
                        crownedPrinceId = p.id;
                        return { ...p, successionPoints: newPoints, isCrownPrince: true };
                    }
                    return { ...p, successionPoints: newPoints };
                }
                return p;
            });
    
            if (isCrowning) {
                return updatedPrinces.map(p => {
                    if (p.id !== crownedPrinceId) {
                        return { ...p, isCrownPrince: false };
                    }
                    return p;
                });
            }
            return updatedPrinces;
        });
    }, [nurtureUsedThisYear]);

    const handleAttack = useCallback((target: TNeighboringState) => {
        const cost = Math.floor(diplomacy[target].defense * 0.5);
        if (military.strength < cost) {
            alert(`Kh√¥ng ƒë·ªß S·ª©c m·∫°nh qu√¢n ƒë·ªôi ƒë·ªÉ t·∫•n c√¥ng! C·∫ßn √≠t nh·∫•t ${cost}.`);
            return;
        }

        const successChance = Math.max(0.1, Math.min(0.9, military.strength / (diplomacy[target].defense * 1.2)));
        const isSuccess = Math.random() < successChance;

        if (isSuccess) {
            alert(`T·∫•n c√¥ng ${target} TH√ÄNH C√îNG! Ta chi·∫øm ƒë∆∞·ª£c nhi·ªÅu chi·∫øn l·ª£i ph·∫©m.`);
            setStats(prev => ({
                ...prev,
                [ENationalStat.Treasury]: Math.min(100, prev[ENationalStat.Treasury] + 15),
                [ENationalStat.Prosperity]: Math.min(100, prev[ENationalStat.Prosperity] + 5),
            }));
            
            const newYuanCampaigns = target === NeighboringState.Yuan ? military.yuanCampaigns + 1 : military.yuanCampaigns;
            const newChampaCampaigns = target === NeighboringState.Champa ? military.champaCampaigns + 1 : military.champaCampaigns;

            setMilitary(prev => ({
                ...prev,
                strength: Math.max(0, prev.strength - Math.floor(cost * 0.8)),
                morale: Math.max(0, prev.morale - 10),
                yuanCampaigns: newYuanCampaigns,
                champaCampaigns: newChampaCampaigns,
            }));
            setDiplomacy(prev => ({
                ...prev,
                [target]: {
                    relationship: Math.max(0, prev[target].relationship - 15),
                    defense: Math.max(10, prev[target].defense - 5),
                }
            }));

            if (target === NeighboringState.Yuan && newYuanCampaigns >= 5) {
                if (nextMongolInvasionYear !== null) {
                    alert("√ù ch√≠ x√¢m l∆∞·ª£c c·ªßa Nh√† Nguy√™n ƒë√£ b·ªã d·∫≠p t·∫Øt! C√°c cu·ªôc x√¢m l∆∞·ª£c l·ªãch s·ª≠ s·∫Ω kh√¥ng x·∫£y ra.");
                    unlockAchievement('preemptive_strike');
                    setNextMongolInvasionYear(null);
                }
            }
            if (target === NeighboringState.Champa && newChampaCampaigns >= 5) {
                unlockAchievement('pacify_champa');
            }

        } else {
            alert(`T·∫•n c√¥ng ${target} TH·∫§T B·∫†I! Qu√¢n ta t·ªïn th·∫•t n·∫∑ng n·ªÅ.`);
            setMilitary(prev => ({
                ...prev,
                strength: Math.max(0, prev.strength - cost),
                morale: Math.max(0, prev.morale - 20),
            }));
        }
    }, [military, diplomacy, unlockAchievement, nextMongolInvasionYear]);

    const handleEndYear = useCallback(async () => {
        setIsEndingYear(true);
        const decisionsText = decisions.map(d => `- V·ªÅ vi·ªác "${d.petitionTitle}": Ho√†ng ƒë·∫ø ƒë√£ quy·∫øt ƒë·ªãnh "${d.decisionText}".`).join('\n');
        const statsText = Object.entries(stats).map(([key, value]) => `- ${key}: ${value}/100`).join('\n');
        const relationsText = Object.values(officials).map(o => `- ${o.name} (${o.title}, ${o.faction}): ${getRelationshipText(o.relationship)} (${o.relationship}/100)`).join('\n');
        const haremText = harem.map(c => `- ${c.title} ${c.name} (Xu·∫•t th√¢n: ${c.origin})`).join('\n') || "- H·∫≠u cung y√™n b√¨nh, kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát.";
        const militaryText = `S·ª©c m·∫°nh: ${military.strength}/100, Tinh th·∫ßn: ${military.morale}/100. ƒê√£ th·∫Øng ${military.yuanCampaigns} chi·∫øn d·ªãch ch·ªëng Nguy√™n, ${military.champaCampaigns} chi·∫øn d·ªãch ch·ªëng Chi√™m Th√†nh.`;
        const successionText = princes.map(p => `- Ho√†ng t·ª≠ ${p.name} (${p.age} tu·ªïi, m·∫π l√† ${p.mother})`).join('\n') || "- Ch∆∞a c√≥ ho√†ng t·ª≠ n·ªëi d√µi.";
        const diplomacyText = Object.entries(diplomacy).map(([state, value]) => `- Quan h·ªá v·ªõi ${state}: ${value.relationship}/100 (Ph√≤ng ng·ª±: ${value.defense})`).join('\n');
        
        const prompt = `
B·ªëi c·∫£nh: NƒÉm th·ª© ${year} tri·ªÅu ƒë·∫°i c·ªßa Ho√†ng ƒë·∫ø ƒê·∫°i Vi·ªát.
S·ª± ki·ªán ƒë·∫ßu nƒÉm:
- Thu·∫ø v·ª• m√πa thu ƒë√£ ƒë∆∞·ª£c thu v·ªÅ, ng√¢n kh·ªë qu·ªëc gia tƒÉng th√™m ${taxRevenueOfTheYear} v·∫°n quan.
${budgetDecisionText ? `- ${budgetDecisionText}` : ''}

T√≥m t·∫Øt c√°c Th√°nh ch·ªâ ƒë√£ ban trong nƒÉm:
${decisionsText || "- NƒÉm nay, b·ªá h·∫° kh√¥ng c√≥ quy·∫øt s√°ch l·ªõn n√†o t·∫°i bu·ªïi ch·∫ßu."}

T√¨nh h√¨nh qu·ªëc gia cu·ªëi nƒÉm:
${statsText}

T√¨nh h√¨nh Tri·ªÅu ch√≠nh & Quan h·ªá ƒê·∫°i th·∫ßn:
${relationsText}

T√¨nh h√¨nh Qu√¢n s·ª±:
${militaryText}

T√¨nh h√¨nh Ngo·∫°i giao:
${diplomacyText}

T√¨nh h√¨nh H·∫≠u cung & K·∫ø v·ªã:
${haremText}
${successionText}

D·ª±a v√†o nh·ªØng th√¥ng tin tr√™n, h√£y vi·∫øt m·ªôt ƒëo·∫°n ghi ch√©p trong Bi√™n Ni√™n S·ª≠ Ho√†ng Tri·ªÅu, t·ªïng k·∫øt l·∫°i m·ªôt nƒÉm tr·ªã v√¨ c·ªßa Ho√†ng ƒë·∫ø. H√£y d√πng vƒÉn phong trang tr·ªçng, uy√™n b√°c c·ªßa m·ªôt s·ª≠ quan ƒê·∫°i Vi·ªát th·ªùi nh√† Tr·∫ßn, t·∫≠p trung v√†o nh·ªØng s·ª± ki·ªán n·ªïi b·∫≠t v√† ·∫£nh h∆∞·ªüng c·ªßa ch√∫ng ƒë·∫øn v·∫≠n m·ªánh qu·ªëc gia, s·ª± ·ªïn ƒë·ªãnh c·ªßa tri·ªÅu ƒë√¨nh, v√† c√°c m·ªëi quan h·ªá trong v√† ngo√†i n∆∞·ªõc.
        `;
        const summary = await generateYearlySummary(prompt);
        setYearlySummary(summary);
        setIsEndingYear(false);
        setGamePhase('YEAR_END');
    }, [year, decisions, stats, officials, harem, budgetDecisionText, taxRevenueOfTheYear, military, princes, diplomacy]);

     const handleInvasionDecision = useCallback((option: InvasionEventOption) => {
        const currentMilitary = military;

        // Calculate battle outcome
        const playerPower = (currentMilitary.strength + option.strengthModifier) * 0.7 + (currentMilitary.morale + option.moraleModifier) * 0.3;
        const successChance = Math.max(0.1, Math.min(0.9, playerPower / 85));
        const isSuccess = Math.random() < successChance;

        const outcome = isSuccess 
            ? { text: option.winText, effects: option.winEffects }
            : { text: option.lossText, effects: option.lossEffects };
            
        alert(`K·∫øt qu·∫£ cu·ªôc chi·∫øn nƒÉm ${year}:\n\n${outcome.text}`);

        if (isSuccess) {
            if (year === 1258) unlockAchievement('invasion_1_win');
            if (year === 1285) unlockAchievement('invasion_2_win');
            if (year === 1288) unlockAchievement('invasion_3_win');
        }

        // Combine all effects
        const allStatEffects: Partial<Stats> = { ...option.baseEffects.stats };
        for (const key in outcome.effects.stats) {
            const statKey = key as NationalStat;
            allStatEffects[statKey] = (allStatEffects[statKey] || 0) + (outcome.effects.stats[statKey] || 0);
        }

        const allMilitaryEffects: Partial<Military> = { ...option.baseEffects.military };
        if (outcome.effects.military.strength) {
             allMilitaryEffects.strength = (allMilitaryEffects.strength || 0) + outcome.effects.military.strength;
        }
        if (outcome.effects.military.morale) {
             allMilitaryEffects.morale = (allMilitaryEffects.morale || 0) + outcome.effects.military.morale;
        }

        // Apply all effects
        setStats(prev => {
            const newStats = { ...prev };
            for (const [key, change] of Object.entries(allStatEffects)) {
                newStats[key as NationalStat] = Math.max(0, Math.min(100, newStats[key as NationalStat] + (change || 0)));
            }
            return newStats;
        });

        setMilitary(prev => {
            const newMilitary = { ...prev };
            if (allMilitaryEffects.strength) newMilitary.strength += allMilitaryEffects.strength;
            if (allMilitaryEffects.morale) newMilitary.morale += allMilitaryEffects.morale;
            newMilitary.strength = Math.max(0, Math.min(100, newMilitary.strength));
            newMilitary.morale = Math.max(0, Math.min(100, newMilitary.morale));
            return newMilitary;
        });
        
        // Log the decision for the annals
        const eventData = INVASION_EVENTS.find(e => e.year === year);
        setDecisions(prev => [...prev, {
            petitionTitle: eventData?.title || `Cu·ªôc chi·∫øn nƒÉm ${year}`,
            decisionText: `B·ªá h·∫° ƒë√£ ch·ªçn chi·∫øn l∆∞·ª£c: "${option.text}". K·∫øt qu·∫£: ${outcome.text}`
        }]);

        // Advance to the next invasion
        const currentInvasionIndex = MONGOL_INVASIONS.indexOf(year);
        if(isSuccess && eventData?.year === 1288) { // Decisive victory at Bach Dang
             setNextMongolInvasionYear(null);
        } else {
             const nextIndex = currentInvasionIndex + 1;
             setNextMongolInvasionYear(MONGOL_INVASIONS[nextIndex] || null);
        }

        setGamePhase('POST_INVASION');
    }, [year, military, unlockAchievement]);

    const handleNewYear = useCallback(() => {
        // Yearly resource and military recovery based on national stats.
        
        // Treasury increases based on Prosperity. +1 Treasury for every 5 Prosperity, max +20.
        const taxRevenue = Math.min(20, Math.floor(stats[ENationalStat.Prosperity] / 5));
        setStats(prevStats => ({ ...prevStats, [ENationalStat.Treasury]: Math.min(100, prevStats[ENationalStat.Treasury] + taxRevenue) }));
        setTaxRevenueOfTheYear(taxRevenue);

        // Military strength increases based on Security. +1 Strength for every 10 Security, max +10.
        const militaryRecovery = Math.min(10, Math.floor(stats[ENationalStat.Security] / 10));
        setMilitary(prev => ({
            ...prev,
            strength: Math.min(100, prev.strength + militaryRecovery),
        }));

        // Harem relationship decay
        setHarem(prevHarem => prevHarem.map(c => ({...c, relationship: Math.max(0, c.relationship - 10) })));

        // Check for new prince birth from favored consort
        if (favoredConsortId) {
            const favoredConsort = harem.find(c => c.id === favoredConsortId);
            if (favoredConsort && Math.random() < 0.10) { // 10% chance
                const princeNames = ["Tr·∫ßn Nh·∫≠t", "Tr·∫ßn Quang", "Tr·∫ßn ƒê·ª©c", "Tr·∫ßn Vƒ©nh", "Tr·∫ßn Kh·∫£i", "Tr·∫ßn Qu·ªëc", "Tr·∫ßn Hi·ªÉn", "Tr·∫ßn Minh"];
                const newPrinceName = princeNames[Math.floor(Math.random() * princeNames.length)];
                
                setPrinces(prev => {
                    const newPrince: Prince = {
                        id: `prince_${Date.now()}`,
                        name: newPrinceName,
                        mother: favoredConsort.name,
                        age: 0,
                        successionPoints: 0,
                        isCrownPrince: false,
                    };
                    const newPrinces = [...prev, newPrince];
                     if (newPrinces.length >= 5) {
                        unlockAchievement('many_children');
                    }
                    alert(`üéâ Ch√∫c m·ª´ng B·ªá h·∫°! ${favoredConsort.title} ${favoredConsort.name} ƒë√£ h·∫° sinh Ho√†ng t·ª≠ ${newPrinceName}!`);
                    return newPrinces;
                });
            }
        }
        
        // Achievement Check: Loyal Court
        if(Object.values(officials).every(o => o.relationship > 85)) {
            unlockAchievement('loyal_court');
        }

        // Reset yearly action trackers
        setFavorUsedThisYear(false);
        setNurtureUsedThisYear(false);
        setFavoredConsortId(null);

        // Advance to the new year
        setYear(prev => prev + 1);
        setYearlySummary(null);
        setCurrentPetitionIndex(0);
        setDecisions([]);
        setPetitions(getAvailablePetitions());
        setGamePhase('BUDGETING');
        setBudgetDecisionText(null);
        setPrinces(prevPrinces => prevPrinces.map(p => ({...p, age: p.age + 1})));
    }, [stats, getAvailablePetitions, favoredConsortId, harem, officials, unlockAchievement]);

    const saveGame = useCallback(() => {
        const gameState: SaveState = { year, stats, officials, harem, petitions, currentPetitionIndex, decisions, gamePhase, taxRevenueOfTheYear, usedAids, military, princes, diplomacy, completedPetitionIds, nextMongolInvasionYear, favorUsedThisYear, nurtureUsedThisYear, favoredConsortId, unlockedAchievements };
        const dataStr = JSON.stringify(gameState, null, 2);
        const dataBlob = new Blob([dataStr], { type: "application/json" });
        const url = URL.createObjectURL(dataBlob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `thien-tu-nha-tran-nam-${year}.json`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }, [year, stats, officials, harem, petitions, currentPetitionIndex, decisions, gamePhase, taxRevenueOfTheYear, usedAids, military, princes, diplomacy, completedPetitionIds, nextMongolInvasionYear, favorUsedThisYear, nurtureUsedThisYear, favoredConsortId, unlockedAchievements]);

    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const text = e.target?.result;
                if (typeof text !== 'string') throw new Error("Invalid file content");
                const savedState: SaveState = JSON.parse(text);
                if (savedState.year && savedState.stats && savedState.officials && savedState.petitions && savedState.gamePhase) {
                    setYear(savedState.year);
                    setStats(savedState.stats);
                    setOfficials(savedState.officials || INITIAL_OFFICIALS);
                    setHarem(savedState.harem || INITIAL_HAREM);
                    setMilitary(savedState.military || INITIAL_MILITARY);
                    setPrinces((savedState.princes || INITIAL_PRINCES).map(p => ({
                        ...p,
                        successionPoints: p.successionPoints || 0,
                        isCrownPrince: p.isCrownPrince || false,
                    })));
                    setDiplomacy(savedState.diplomacy || INITIAL_DIPLOMACY);
                    setPetitions(savedState.petitions);
                    setCurrentPetitionIndex(savedState.currentPetitionIndex || 0);
                    setDecisions(savedState.decisions || []);
                    setGamePhase(savedState.gamePhase || 'BUDGETING');
                    setTaxRevenueOfTheYear(savedState.taxRevenueOfTheYear || 0);
                    setUsedAids(savedState.usedAids || []);
                    setCompletedPetitionIds(savedState.completedPetitionIds || []);
                    setNextMongolInvasionYear(savedState.nextMongolInvasionYear !== undefined ? savedState.nextMongolInvasionYear : MONGOL_INVASIONS[0]);
                    setFavorUsedThisYear(savedState.favorUsedThisYear || false);
                    setNurtureUsedThisYear(savedState.nurtureUsedThisYear || false);
                    setFavoredConsortId(savedState.favoredConsortId || null);
                    setUnlockedAchievements(savedState.unlockedAchievements || []);

                    setYearlySummary(null);
                    setIsEndingYear(false);
                    setGameStarted(true);
                    alert(`ƒê√£ t·∫£i th√†nh c√¥ng v√°n ch∆°i t·ª´ nƒÉm ${savedState.year}.`);
                } else {
                    alert("T·ªáp l∆∞u kh√¥ng h·ª£p l·ªá. (Invalid save file.)");
                }
            } catch (error) {
                console.error("Failed to load game:", error);
                alert("Kh√¥ng th·ªÉ ƒë·ªçc t·ªáp l∆∞u. T·ªáp c√≥ th·ªÉ b·ªã h·ªèng. (Failed to read save file. It may be corrupted.)");
            }
        };
        reader.readAsText(file);
        if (fileInputRef.current) fileInputRef.current.value = "";
    };

    const triggerLoadGame = () => fileInputRef.current?.click();
    
    const renderModalContent = () => {
        switch(activeModal) {
            case 'relationships': return <RelationshipsDashboard officials={officials} treasury={stats[ENationalStat.Treasury]} onBribe={handleBribeOfficial} />;
            case 'harem': return <HaremDashboard harem={harem} onFavorConsort={handleFavorConsort} favorUsedThisYear={favorUsedThisYear} />;
            case 'military': return <MilitaryPanel military={military} officials={Object.values(officials)} />;
            case 'succession': return <SuccessionPanel princes={princes} onNurturePrince={handleNurturePrince} nurtureUsedThisYear={nurtureUsedThisYear} />;
            case 'diplomacy': return <DiplomacyPanel diplomacy={diplomacy} military={military} onAttack={handleAttack} />;
            case 'aids': return <AidsPanel usedAids={usedAids} onUseAid={handleUseAid} />;
            case 'tutorial': return <TutorialPanel />;
            case 'donate': return <DonationPanel />;
            case 'apiKey': return <ApiKeySetupModal currentKey={apiKey} onKeyUpdate={handleApiKeyUpdate} onClose={() => setActiveModal(null)} />;
            case 'achievements': return <AchievementsPanel allAchievements={ACHIEVEMENTS} unlockedIds={unlockedAchievements} />;
            default: return null;
        }
    };
    
    const getModalTitle = () => {
        switch(activeModal) {
            case 'relationships': return "Quan H·ªá Tri·ªÅu Th·∫ßn";
            case 'harem': return "H·∫≠u Cung";
            case 'military': return "Qu√¢n S·ª±";
            case 'succession': return "K·∫ø V·ªã";
            case 'diplomacy': return "Ngo·∫°i Giao & Chi·∫øn Tranh";
            case 'aids': return "Quy·ªÅn Tr·ª£ Gi√∫p (Emergency Aid)";
            case 'tutorial': return "H∆∞·ªõng D·∫´n Ch∆°i";
            case 'donate': return "·ª¶ng H·ªô T√°c Gi·∫£";
            case 'apiKey': return "Thi·∫øt l·∫≠p API Key";
            case 'achievements': return "Th√†nh T·ª±u";
            default: return "";
        }
    };

    const renderGameContent = () => {
        if (gamePhase === 'BUDGETING') {
            return <BudgetAllocation treasury={stats[ENationalStat.Treasury]} onConfirm={handleConfirmBudget} taxRevenue={taxRevenueOfTheYear}/>;
        }

        if (gamePhase === 'POST_INVASION') {
             return <CourtSession petition={null} onDecision={() => {}} onEndYear={handleEndYear} isEndingYear={isEndingYear} />;
        }
        
        if (gamePhase === 'COURT_SESSION' || gamePhase === 'YEAR_END') {
             if (yearlySummary) {
                return <YearlyAnnals summary={yearlySummary} onNewYear={handleNewYear} />;
            }

            const invasionEventData = INVASION_EVENTS.find(e => e.year === year);
            if (gamePhase === 'COURT_SESSION' && invasionEventData) {
                return (
                    <InvasionEvent
                        eventData={invasionEventData}
                        advisor={officials[invasionEventData.advisor]}
                        onDecision={handleInvasionDecision}
                    />
                );
            }

            const showCourtSession = currentPetitionIndex < 4 && currentPetition;
            return <CourtSession petition={showCourtSession ? currentPetition : null} onDecision={handleDecision} onEndYear={handleEndYear} isEndingYear={isEndingYear} />;
        }
        return null;
    }

    return (
        <div className="min-h-screen bg-fixed" style={{ backgroundImage: `url('data:image/svg+xml;utf8,<svg width="100" height="100" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><path d="M11 18.273l8.445 8.445L11 35.164V18.273zm35.164 16.891L37.719 26.72l8.445-8.446v16.892zM19.445 26.719L27.89 18.27l-8.445-8.445v16.89zM11 51.547l8.445 8.445L11 68.438V51.547zm35.164 16.891L37.719 60l8.445-8.446v16.892zM19.445 60l8.445-8.445-8.445-8.445v16.89zM11 84.81l8.445 8.445L11 101.7V84.81zm35.164 16.891L37.719 93.25l8.445-8.446v16.892zM19.445 93.25l8.445-8.445-8.445-8.445v16.89zM53.72 11l8.445 8.445L53.72 27.89V11zm35.164 16.891L80.44 19.445l8.445-8.446v16.892zM62.164 19.445L70.61 11l-8.445-8.445v16.89zM53.72 44.27l8.445 8.445-8.445 8.446V44.27zm35.164 16.891L80.44 52.715l8.445-8.446v16.892zM62.164 52.715l8.445-8.445-8.445-8.445v16.89zM53.72 77.54l8.445 8.445-8.445 8.446V77.54zm35.164 16.891L80.44 86l8.445-8.446v16.892zM62.164 86l8.445-8.445-8.445-8.445v16.89z" fill="${isDarkMode ? '%23fde68a' : '%239a3412'}" fill-opacity="${isDarkMode ? '0.03' : '0.05'}" fill-rule="evenodd"/></svg>')`}}>
            <main className="container mx-auto p-4 md:p-8">
                {!gameStarted ? (
                    <MainMenu 
                        onNewGame={handleNewGame}
                        onLoadGame={triggerLoadGame}
                        onShowTutorial={() => setActiveModal('tutorial')}
                        onShowDonate={() => setActiveModal('donate')}
                        onShowApiKeySetup={() => setActiveModal('apiKey')}
                        toggleDarkMode={toggleDarkMode}
                        isDarkMode={isDarkMode}
                        apiKey={apiKey}
                    />
                ) : (
                    <>
                        <header className="text-center mb-8">
                            <div className="flex justify-center items-center gap-4">
                               <FlourishIcon className="w-12 h-12 text-red-900 dark:text-amber-300"/>
                               <h1 className="text-4xl md:text-5xl font-extrabold font-serif-display text-red-900/90 dark:text-amber-200/90 tracking-wider">Thi√™n T·ª≠ Nh√† Tr·∫ßn</h1>
                               <FlourishIcon className="w-12 h-12 text-red-900 dark:text-amber-300 scale-x-[-1]"/>
                            </div>
                            <div className="flex items-center justify-center gap-4">
                                <p className="text-stone-600 dark:text-stone-400 font-semibold text-lg mt-2">NƒÉm {year}</p>
                                <InvasionCountdown currentYear={year} nextInvasionYear={nextMongolInvasionYear} />
                            </div>
                            <div className="flex justify-center items-center gap-2 md:gap-4 mt-4 flex-wrap">
                                <button onClick={saveGame} disabled={gamePhase === 'GAME_OVER'} className="bg-amber-600 hover:bg-amber-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition-all duration-300 text-sm disabled:bg-stone-400 dark:disabled:bg-stone-600 dark:disabled:text-stone-400 disabled:cursor-not-allowed dark:bg-amber-700 dark:hover:bg-amber-800">L∆∞u Game</button>
                                <button onClick={triggerLoadGame} disabled={gamePhase === 'GAME_OVER'} className="bg-stone-600 hover:bg-stone-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition-all duration-300 text-sm disabled:bg-stone-400 dark:disabled:bg-stone-600 dark:disabled:text-stone-400 disabled:cursor-not-allowed dark:bg-stone-700 dark:hover:bg-stone-800">T·∫£i Game</button>
                                <button onClick={() => setActiveModal('tutorial')} className="bg-sky-600 hover:bg-sky-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition-all duration-300 text-sm flex items-center gap-2 dark:bg-sky-700 dark:hover:bg-sky-600">
                                  <QuestionMarkCircleIcon className="w-5 h-5"/>
                                  <span className="hidden sm:inline">H∆∞·ªõng D·∫´n</span>
                                </button>
                                <button onClick={() => setActiveModal('achievements')} className="bg-yellow-500 hover:bg-yellow-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition-all duration-300 text-sm flex items-center gap-2 dark:bg-yellow-600 dark:hover:bg-yellow-500">
                                    <TrophyIcon className="w-5 h-5"/>
                                    <span className="hidden sm:inline">Th√†nh T·ª±u</span>
                                </button>
                                <button onClick={() => setActiveModal('donate')} className="bg-amber-500 hover:bg-amber-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition-all duration-300 text-sm flex items-center gap-2 dark:bg-amber-600 dark:hover:bg-amber-500">
                                   <GiftIcon className="w-5 h-5"/>
                                   <span className="hidden sm:inline">·ª¶ng h·ªô</span>
                                </button>
                                 <button onClick={toggleDarkMode} className="bg-stone-200 dark:bg-stone-700 hover:bg-stone-300 dark:hover:bg-stone-600 text-stone-700 dark:text-stone-200 font-semibold py-2 px-4 rounded-lg shadow-md transition-all duration-300 text-sm flex items-center gap-2">
                                   {isDarkMode ? <SunIcon className="w-5 h-5 text-yellow-400"/> : <MoonIcon className="w-5 h-5 text-indigo-500"/>}
                                   <span className="hidden sm:inline">{isDarkMode ? 'S√°ng' : 'T·ªëi'}</span>
                                </button>
                            </div>
                        </header>
                        
                         <div className="space-y-6">
                            {gamePhase === 'GAME_OVER' && gameOverMessage ? (
                                 <div className="mt-8">
                                    <GameOver message={gameOverMessage} onRestart={handleRestart} />
                                 </div>
                            ) : (
                                <>
                                    <Dashboard stats={stats} />
                                    
                                    <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-2 md:gap-4 p-4 bg-white/50 dark:bg-stone-800/50 backdrop-blur-sm rounded-xl shadow-lg">
                                        <button onClick={() => setActiveModal('relationships')} className="flex items-center justify-center gap-2 bg-stone-100 hover:bg-stone-200 text-stone-700 font-semibold py-2 px-3 rounded-lg shadow-sm transition-all duration-200 dark:bg-stone-700 dark:hover:bg-stone-600 dark:text-stone-200">
                                            <UsersIcon className="w-5 h-5" />
                                            <span className="hidden sm:inline">Tri·ªÅu Th·∫ßn</span>
                                        </button>
                                        <button onClick={() => setActiveModal('harem')} className="flex items-center justify-center gap-2 bg-rose-100 hover:bg-rose-200 text-rose-700 font-semibold py-2 px-3 rounded-lg shadow-sm transition-all duration-200 dark:bg-rose-900/50 dark:hover:bg-rose-800/50 dark:text-rose-200">
                                            <HeartIcon className="w-5 h-5" />
                                            <span className="hidden sm:inline">H·∫≠u Cung</span>
                                        </button>
                                         <button onClick={() => setActiveModal('military')} className="flex items-center justify-center gap-2 bg-red-100 hover:bg-red-200 text-red-700 font-semibold py-2 px-3 rounded-lg shadow-sm transition-all duration-200 dark:bg-red-900/50 dark:hover:bg-red-800/50 dark:text-red-200">
                                            <ShieldCheckIcon className="w-5 h-5" />
                                            <span className="hidden sm:inline">Qu√¢n S·ª±</span>
                                        </button>
                                        <button onClick={() => setActiveModal('succession')} className="flex items-center justify-center gap-2 bg-yellow-100 hover:bg-yellow-200 text-yellow-700 font-semibold py-2 px-3 rounded-lg shadow-sm transition-all duration-200 dark:bg-yellow-900/50 dark:hover:bg-yellow-800/50 dark:text-yellow-200">
                                            <UserGroupIcon className="w-5 h-5" />
                                            <span className="hidden sm:inline">K·∫ø V·ªã</span>
                                        </button>
                                        <button onClick={() => setActiveModal('diplomacy')} className="flex items-center justify-center gap-2 bg-green-100 hover:bg-green-200 text-green-700 font-semibold py-2 px-3 rounded-lg shadow-sm transition-all duration-200 dark:bg-green-900/50 dark:hover:bg-green-800/50 dark:text-green-200">
                                            <GlobeAltIcon className="w-5 h-5" />
                                            <span className="hidden sm:inline">Ngo·∫°i Giao</span>
                                        </button>
                                        <button onClick={() => setActiveModal('aids')} className="flex items-center justify-center gap-2 bg-blue-100 hover:bg-blue-200 text-blue-700 font-semibold py-2 px-3 rounded-lg shadow-sm transition-all duration-200 dark:bg-blue-900/50 dark:hover:bg-blue-800/50 dark:text-blue-200">
                                            <SparklesIcon className="w-5 h-5" />
                                            <span className="hidden sm:inline">Tr·ª£ Gi√∫p</span>
                                        </button>
                                    </div>

                                    <div className="mt-8">
                                        {renderGameContent()}
                                    </div>
                                </>
                            )}
                        </div>
                    </>
                )}
                
                {/* Modal and file input are rendered outside the conditional to be available everywhere */}
                <Modal title={getModalTitle()} isOpen={!!activeModal} onClose={() => setActiveModal(null)}>
                    {renderModalContent()}
                </Modal>
                <input type="file" ref={fileInputRef} onChange={handleFileChange} accept=".json" style={{ display: 'none' }} />

            </main>
        </div>
    );
};

export default App;
